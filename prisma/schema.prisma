// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  AGENT
  SUPPORT
  ADMIN
  SUPERADMIN
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(AGENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  posts Post[]

  @@map("users") // optional: maps the model to a MongoDB collection name
}


model Property {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[]
  price       Float?
  country     String
  city        String
  address     String?
  pdfUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  PropertyEnquiry PropertyEnquiry[]

  @@map("properties") // optional, aligns with MongoDB collection name
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions") // optional, aligns with MongoDB collection name
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phoneNumber String
  message     String?
  status      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("contacts") // optional, aligns with MongoDB collection name
}

model Consultation {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  service                String
  meetingDate            DateTime
  meetingLocation        String
  phoneNumber            String
  email                  String
  organizationName       String?
  name                   String
  details                String?
  preferredModeOfContact String?
  status                 Boolean  @default(false)
  createdAt              DateTime @default(now())

  @@map("consultations") // optional, aligns with MongoDB collection name
}

model SellEnquiry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  status    Boolean
  address   String
  timeline  String
  createdAt DateTime @default(now())

  @@map("sell_enquiry") // optional, aligns with MongoDB collection name
}

model PropertyEnquiry {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  phone      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@map("property_enquiry")
}

model Affiliate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("affiliates") // optional: maps the model to a MongoDB collection name
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("categories")
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  coverImage  String?
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  views       Int         @default(0)
  readTime    Int?        // in minutes
  tags        String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?

  authorId   String @db.ObjectId
  author     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("posts")
}

